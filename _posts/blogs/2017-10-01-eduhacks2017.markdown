---
title: "Eduhacks 2017: Down the Rabbit Hole"
layout: post
date: 2017-10-05 22:10
tag:
- hackathon
- dev-diary
image: /assets/images/blogs/secondplace.jpg
headerImage: true
featuredImage: true
blog: true 
blog-highlights: true
description: "how both attending, then winning, my first hackathon would set the tone of my studenthood"
# the rest of my
category: blog
author: nicholaschin
externalLink: false
---

rabbit hole 
noun 
*Used to refer to a bizarre, confusing, or nonsensical situation or environment, typically one from which it is difficult to extricate oneself.*

I've never been accused of substance abuse. Unless you'd consider 60mg worth of caffeine doused in your bloodstream a form of overdose.

A feeling of such high is difficult to come by. Yet is one that perfectly describes my experience at Eduhacks 2017; the first of many 24-hour hackathons I would attend during my time as an undegraduate at the University of British Columbia. In retrospect, it's difficult to justify why I'd choose to spend my weekends holed up indoors, despite being situated in the heart of bright and beautiful Vancouver. Nevertheless, this event being my first, meant I certainly wasn't expecting to win anything. I suppose what ultimately convinced me was the prospect of gaining experience outside the classroom. Plus, I really wanted to add to my laptop sticker collection.

Due to a mixture of ineffective communication and bad 'economic' planning, however, the team-of-five I assembled beforehand never showed up. This left me and one other friend (God bless her for her commitment) wrought with uncertainty. *How do we meet new people? Why would anyone accept us into their team? Even if they did, how would I keep up?* No longer protected by the in-group homogeneity bubble, being surrounded by far more experienced hackers left me feeling more vulnerable to imposter syndrome than ever. Metaphorically, in this instance the ground beneath my feet began to sink; thus began my descent down the rabbit hole.

## Team building and Death Squads

The first hour of the plunge down is typically defined by a wealth of inexperience. In my case, that inexperience made perfect partners with my underqualifications.  At the time, one of the more popular coping mechanism circulated as advice to me was to "fake it till you make it". I did entertain the thought - that perhaps explicitly overstating one's achievements could yield acceptance. But it was a risk I was not willing to take. My friend and I having no background in Computer Science, couldn't fake knowing anything else besides Racket (the only language we knew at the time) and writing Java *for* loops.

What I wish I knew at the time was that the hacker community, no matter how insufferable proponents of it may be, is also comprised of some of the most talented and friendly people I've had the pleasure of working with. It just so happened, on that fateful day, I was introduced to three of them. All of them had diverse backgrounds - an educator, an artist, a developer - and were armed with a melting pot of ideas. Plus, it quickly became evident they had the skills to back it up. 

That was the first important thing I learnt that day. To venture out of one's comfort zone at a hackathon is to continuously try to meet new people and work together. The process of working with strangers instead of friends may be initially daunting, especially when lacking confidence. But it presents a rare opportunity to participate in a dialougue where initially alien concepts, algorithms, tools etc. are put on your radar. And the only way to overcome the information overload that follows, is to find out more in your own time - one step at a time.


<!-- 

But in the moment, ain't got no time for games, CODE AND FIGURE IT OUT NOW! 

It's
It forced me out of my comfort zone; daunted by the expansive horizons, and what I know now is insignificant to how much there is out there. (no matter how many times I attend hackathons and grow, there's always still something I don't know)
Nor should the process be conditional; no matter one's level of experience, there are always things that can be learnt by speaking to others.

The solution: next part = working on it

## Learn fast or die slow 

the dopamine 

## Learn from where?

## Expecting to win (skills =/= ideas)

## The thing about rabbit holes
- what is a rabbit hole
- why did I go down the rabbit hole
- winning was nice, but over the countless hackathons I've learnt: perserverence, you can always be better, you win you lose, can be a waste of time if you're not careful. But it's about putting yourself out there and doing all of the above (learning, inspiring, developing, networking) 
- SHOW ALL OTHER HACKATHONS YOU DIDN'T WIN BUT HAD FUN (YOU GROW IN EACH ONE)

- meeting people, absorbing so much (knowledge transfer), recruiters, mentorship 

- How do people know so much. Where do they learn all this? (not in the classroom, through sheer effort, willpower, and late nights)
- The rabbit hole I refer to is the time spent and madness dedicated to figure out problems, stick with code. Not just get good at algorithms and class stuff, learn to use libraries, frameworks. Self taught
- The need to know, the desire to succeed
- The never ending learning cycle 

- Realistic expectaions - the rush of winning is rare (idea x skills) - winning ideas, no matter how good a developer you are 

- The thing about rabbit holes https://hackernoon.com/the-thing-about-rabbit-holes-201402f77873 

- And no matter how much you learn. There's always more. The constant learning cycle is essential to staying viable. 
The Constant Learning Cycle of a Web Developer 


Now the world of industry is a complete different beast, but as long as you approach things with the same growth-mindset and a continuous desire to learn (as described in this blog), you're all good to go.  -->